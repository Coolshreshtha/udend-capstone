version: 2.1 #version 2 threw error with Unsupported or missing workflows config version

# orbs: 
#   aws-eks: circleci/aws-eks@1.1.0
#   kubernetes: circleci/kubernetes@0.4.0

jobs:
  build:
    docker:
      - image: circleci/python:3.6.7-stretch
  
    working_directory: ~/repo

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "require.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-

      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install
            # Install hadolint
            sudo wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v1.16.3/hadolint-Linux-x86_64
            sudo chmod +x /bin/hadolint
      
      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint
      
      # run tests!
      - run:
          name: run tests
          command: |
            . venv/bin/activate
            make test
             
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "require.txt" }}
            
  create_upload_docker:
    docker:
    - image: docker:17.05.0-ce-git
    working_directory: /app
    steps:
      - checkout
      - setup_remote_docker
      #reference: https://github.com/builtinnya/circleci-2.0-beta-docker-example/blob/master/.circleci/config.yml
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache \
              py-pip=9.0.0-r1
            pip install \
              docker-compose==1.12.0 \
              awscli==1.11.76
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "require.txt" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
          #            # docker image ls
            # # docker run -d -p 8000:80 capstone
      - run:
          name: build and push docker image
          no_output_timeout: 5m
          # # export IMAGE_TAG=capstone$(date +%s)
          command: |
            echo "initiating docker build"
           
            docker build --tag=capstone .
            echo "Image build successful"
            docker image ls
            dockerpath=bchanak/capstone
            docker login --username ${DOCKER_USERNAME} --password ${DOCKER_PASSWORD}
            echo "login to docker hub successful"
            docker tag capstone $dockerpath:latest
            docker push $dockerpath
      - run:
          name: install curl
          command: |
            sudo apt install curl
            curl --version
      - run:
          name: test container
          command: |
            docker run -d -p 8000:80 capstone
            export CONTAINER_ID=$(docker ps -q)
            echo ${CONTAINER_ID}
            curl -s localhost:8000
            docker stop ${CONTAINER_ID}
      # - run: 
      #     name: upload docker to docker hub
      #     no_output_timeout: 5m
      #     command: |
            # dockerpath=bchanak/path
            # docker login --username bchanak --password-stdin $S{DOCKER_PASSWORD}
            # docker tag capstone $dockerpath
            # docker push $dockerpath

  # deploy_kubernetes:
  #   executor: aws-eks/python3
  #   steps:
  #     - checkout
  #     - run:
  #         name: install kubectl
  #         command: |
  #           sudo curl --silent --location -o /usr/local/bin/kubectl \
  #           https://amazon-eks.s3.us-west-2.amazonaws.com/1.19.6/2021-01-05/bin/linux/amd64/kubectl
  #           sudo chmod +x /usr/local/bin/kubectl
  #           for command in kubectl jq envsubst aws
  #           do
  #             which $command &>/dev/null && echo "$command in path" || echo "$command NOT FOUND"
  #           done
      
      
  
      # - aws-eks/create-cluster: 
      #     cluster-name: capstone-cluster
      #     node-type: t3.micro
      #     nodes-min: 1
      #     nodes-max: 2
          #https://medium.com/bb-tutorials-and-thoughts/aws-deploying-react-app-with-nginx-on-eks-2d3384247cda
      # - run: 
      #     name: deploy cluster based on template
      #     command: |
      #       kubectl apply -f deploy.yaml
      #       kubectl apply -f service.yaml
      #       kubectl get deployment ${IMAGE_TAG}
  
  #     - run:
  #         name: install kubectl
  #         command: |
  #           sudo curl -o /usr/local/bin/kubectl \
  #           https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
  #           sudo chmod +x /usr/local/bin/kubectl
            
  deploy_kubernetes:
    docker:
    - image: circleci/python:3.6.7-stretch
  
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: install kubectl
          command: |
             sudo curl -o /usr/local/bin/kubectl \
             https://amazon-eks.s3.us-west-2.amazonaws.com/1.21.2/2021-07-05/bin/linux/amd64/kubectl
             sudo chmod +x /usr/local/bin/kubectl
             
      - run: 
          name: install eksctl
          command: |
            curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp

            sudo mv -v /tmp/eksctl /usr/local/bin
            eksctl version


      - run:
          name: create and test cluster
          command: |
            eksctl create cluster -f cluster.yml
            kubectl get nodes
      - run:
          name: install curl
          command: |
            sudo apt install curl
            curl --version
      - run:
          name:
          command: |
            STACK_NAME=$(eksctl get nodegroup --cluster capstone -o json | jq -r '.[].StackName')
            ROLE_NAME=$(aws cloudformation describe-stack-resources --stack-name $STACK_NAME | jq -r '.StackResources[] | select(.ResourceType=="AWS::IAM::Role") | .PhysicalResourceId')
            echo "export ROLE_NAME=${ROLE_NAME}" | tee -a ~/.bash_profile

      - run:
          name: apply deployment and service
          command: |
            kubectl apply -f deployment.yml
            kubectl apply -f service.yml
            kubectl get deployment capstone
            kubectl get service capstone -o wide
            ELB=$(kubectl get service capstone -o json | jq -r '.status.loadBalancer.ingress[].hostname')
            echo ${ELB}
            curl -s ${ELB}:8000
            
          
            
      # - aws-eks/update-kubeconfig-with-authenticator:
      #     cluster-name: << parameters.cluster-name >>
      #     install-kubectl: true
      # - kubernetes/create-or-update-resource:
      #     get-rollout-status: true
      #     resource-file-path: tests/nginx-deployment/deployment.yaml
      #     resource-name: deployment/nginx-deployment
            
workflows:
  default:
    jobs:
      - build
      - create_upload_docker:
          requires:
            - build
      - deploy_kubernetes:
          requires: 
            - create_upload_docker
      # # - deploy
      